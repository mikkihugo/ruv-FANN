name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        features: ["", "--all-features", "--no-default-features"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable'
    
    - name: Clippy
      run: cargo clippy --all-targets ${{ matrix.features }} -- -D warnings
      if: matrix.rust == 'stable'
    
    - name: Run tests
      run: cargo test ${{ matrix.features }}
    
    - name: Run doctests
      run: cargo test --doc ${{ matrix.features }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  benchmarks:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
    - name: Run benchmarks
      run: cargo bench --bench langlands_benchmarks

  wasm-build:
    name: WASM Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Build WASM package
      run: |
        cd wasm
        wasm-pack build --target web --out-dir pkg
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-package
        path: wasm/pkg/

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Build documentation
      run: cargo doc --all-features --no-deps
    - name: Upload docs
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Validate package
      run: cargo package --allow-dirty
    - name: Test package installation
      run: |
        cd target/package
        tar -xzf geometric-langlands-*.crate
        cd geometric-langlands-*
        cargo test --all-features

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security-audit, benchmarks, wasm-build, docs, package-validation]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Download WASM artifacts
      uses: actions/download-artifact@v4
      with:
        name: wasm-package
        path: wasm/pkg/
    
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: target/doc/
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract changelog for this version
        awk '/^## \[${{ steps.version.outputs.VERSION }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.txt
        
        # If no specific changelog, create generic notes
        if [ ! -s release_notes.txt ]; then
          cat << EOF > release_notes.txt
        ## Release v${{ steps.version.outputs.VERSION }}
        
        This release includes improvements to the Geometric Langlands Conjecture framework.
        
        ### Installation
        \`\`\`toml
        [dependencies]
        geometric-langlands = "${{ steps.version.outputs.VERSION }}"
        \`\`\`
        
        ### Documentation
        - [API Documentation](https://docs.rs/geometric-langlands/${{ steps.version.outputs.VERSION }})
        - [GitHub Repository](https://github.com/ruvnet/ruv-FANN/tree/main/geometric_langlands_conjecture)
        EOF
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release_notes.txt
        files: |
          target/package/geometric-langlands-*.crate
          wasm/pkg/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish

  manual-release:
    name: Manual Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - uses: dtolnay/rust-toolchain@stable
    
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
    
    - name: Run release script
      run: |
        chmod +x scripts/release.sh
        ./scripts/release.sh ${{ github.event.inputs.version_type }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    
    - name: Generate documentation
      run: cargo doc --all-features --no-deps
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: target/doc
        destination_dir: docs/api